#version 460
#extension GL_EXT_ray_tracing : require

// this shader launches a ray into the direction of each light source checking for intersections.
// If an intersection is found, the pixel is in shadow, if not, the pixel is illuminated by the light source.

#define MAX_STAGE_TEXTURES 1024

const float pi = 3.14159265359;

struct payload {
    vec3 Origin;
    vec3 Direction;
    int Hit;
    int HitInstanceID;
    vec3 HitLocation;
    vec2 UV;
    int MaterialIndex;
};

// Standard material info struct
struct material {
	int 	Transparency;
	float 	AlbedoVertexWeight;
	float 	AlbedoTextureWeight;
	float 	AlbedoWeight;
	int 	AlbedoTextureIndex;
	vec3 	Albedo;
	float 	OpacityTextureWeight;
	float 	OpacityWeight;
	int 	OpacityTextureIndex;
	float 	Opacity;
	float 	NormalVertexWeight;
	float 	NormalTextureWeight;
	int 	NormalTextureIndex;
	int 	HeightTextureIndex;
	float 	HeightScale;
	int 	HeightStepCount;
	float 	AmbientLightingTextureWeight;
	float 	AmbientLightingWeight;
	int 	AmbientLightingTextureIndex;
	vec3 	AmbientLighting;
	float 	EmissiveTextureWeight;
	float 	EmissiveWeight;
	int 	EmissiveTextureIndex;
	vec3 	Emissive;
	float 	SpecularTextureWeight;
	float 	SpecularWeight;
	int 	SpecularTextureIndex;
	vec3 	Specular;
	float 	ShininessTextureWeight;
	float 	ShininessWeight;
	int 	ShininessTextureIndex;
	float 	Shininess;
	float 	AmbientOcclusionTextureWeight;
	float 	AmbientOcclusionWeight;
	int 	AmbientOcclusionTextureIndex;
	float 	AmbientOcclusion;
	float 	MetallicTextureWeight;
	float 	MetallicWeight;
	int 	MetallicTextureIndex;
	float 	Metallic;
	float 	RoughnessTextureWeight;
	float 	RoughnessWeight;
	int 	RoughnessTextureIndex;
	float 	Roughness;
	float 	IORVertexWeight;
	float 	IORTextureWeight;
	float 	IORWeight;
	int 	IORTextureIndex;
	float 	IOR;
	float 	SheenColorTextureWeight;
	float 	SheenColorWeight;
	int 	SheenColorTextureIndex;
	vec3 	SheenColor;
	float 	SheenIntensityTextureWeight;
	float 	SheenIntensityWeight;
	float 	SheenRoughnessTextureWeight;
	float 	SheenRoughnessWeight;
	int 	SheenMaskTextureIndex;
	float 	SheenRoughness;
	float 	SheenIntensity;
	float 	ClearCoatStrengthTextureWeight;
	float 	ClearCoatStrengthWeight;
	float 	ClearCoatRoughnessTextureWeight;
	float 	ClearCoatRoughnessWeight;
	int 	ClearCoatStrengthRoughnessTextureIndex;
	float 	ClearCoatStrength;
	float 	ClearCoatRoughness;
	float 	ClearCoatNormalTextureWeight;
	float 	ClearCoatNormalWeight;
	int 	ClearCoatNormalTextureIndex;
	vec3 	ClearCoatNormal;
	float 	ClearCoatTintTextureWeight;
	float 	ClearCoatTintWeight;
	int 	ClearCoatTintTextureIndex;
	vec3 	ClearCoatTint;
	float 	ClearCoatIOR;
	float 	ClearCoatThickness;
};

struct light {
	int 	Type;
	float 	Intensity;
	vec3 	Color;
	vec3 	Position;
	vec3 	Direction;
	float 	SpotAngle;
};

// Ray Payload
layout(location = 0) rayPayloadEXT payload Ray;
// Scene Geometry
layout(set = 0, binding = 0) uniform accelerationStructureEXT TLAS;
// Scene Material Textures
layout(set = 0, binding = 1) uniform sampler2D MaterialColor[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 2) uniform sampler2D MaterialOpacity[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 3) uniform sampler2D MaterialNormalMap[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 4) uniform sampler2D MaterialHeightMap[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 5) uniform sampler2D MaterialEmissive[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 6) uniform sampler2D MaterialSpecular[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 7) uniform sampler2D MaterialShininess[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 8) uniform sampler2D MaterialAmbientOcclusion[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 9) uniform sampler2D MaterialRoughness[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 10) uniform sampler2D MaterialMetallic[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 11) uniform sampler2D MaterialSheen[MAX_STAGE_TEXTURES];
layout(set = 0, binding = 12) uniform sampler2D MaterialClearCoat[MAX_STAGE_TEXTURES];
// Full materials for every mesh instace in the scene.
layout(std140, set = 0, binding = 13) buffer MaterialSSBO {
	material Material[];
};
// Deferred shading for light sources for both lighting and shadows.
layout(std140, set = 0, binding = 14) buffer LightSSBO {
	light Light[];
};
// Geometry Buffer Data
layout(set = 1, binding = 1, rgba32f) uniform image2D OutputColor;
layout(set = 1, binding = 2, rgba32f) uniform image2D PixelColor;
layout(set = 1, binding = 3, rgba32f) uniform image2D PixelPosition;
layout(set = 1, binding = 4, rgba32f) uniform image2D PixelNormal;
layout(set = 1, binding = 5, rgba32f) uniform image2D PixelEmissive;
layout(set = 1, binding = 6, rgba32f) uniform image2D PixelSS;
layout(set = 1, binding = 7, rgba32f) uniform image2D PixelORM;
// Camera Data
layout (set = 2, binding = 0) uniform Camera3DUBO {
	vec3 Position;
	mat4 Rotation;
	mat4 Projection;
} Camera3D;

// ----- PBR Rendering Functions ----- //

float normal_distribution(float aNdotH, float aRoughness) {
	// Defines the specular highlight of light reflection.
	float a = aRoughness * aRoughness;  // Squared roughness (alpha^2)
	
	// Compute GGX denominator (squared term in denominator)
	float aDenom = ((aNdotH * aNdotH) * (a - 1.0) + 1.0);
	
	// Compute GGX normal distribution function
	return (a / (pi * aDenom * aDenom)); // Correct squaring of denominator
}

float geometric_attenuation(float aHdotN, float aVdotH, float aNdotV, float aNdotL) {
	return min(1.0, min(2.0 * aHdotN * aNdotV / aVdotH, 2.0 * aHdotN * aNdotL / aVdotH));
}

float fresnel_schlick(float aVdotH, float aF0) {
	float Factor = 1.0 - aVdotH;
	float Factor5 = Factor * Factor * Factor * Factor * Factor; // Faster than pow()
	return aF0 + (1.0 - aF0) * Factor5;
}

float rs(vec3 aL, vec3 aN, vec3 aV, float aRoughness, float aMetallic) {
	// Load onto stack for multi usage.
	vec3 h = normalize(aL + aV);
	float HdotN = max(dot(h, aN), 0.001);
	float VdotH = max(dot(aV, h), 0.001);
	float NdotV = max(dot(aN, aV), 0.001);
	float NdotL = max(dot(aN, aL), 0.001);
	float F0 = mix(0.04, 1.0, aMetallic);

	// Load cook torrance terms.
	float D = normal_distribution(dot(aN, h), aRoughness);
	float G = geometric_attenuation(HdotN, VdotH, NdotV, NdotL);
	float F = fresnel_schlick(dot(h, aV), F0);

	// return full specular term of the BRDF.
	return (D * G * F) / (4.0 * NdotL * NdotV);
}

void main() {
	// Get Index per ray.
	ivec2 RayIndex = ivec2(gl_LaunchIDEXT.xy);
	ivec2 Resolution = imageSize(PixelColor);

	// Load G-buffer data
	vec4 Albedo = imageLoad(PixelColor, RayIndex);
	vec3 WorldPos = imageLoad(PixelPosition, RayIndex).xyz;
	vec3 Normal = imageLoad(PixelNormal, RayIndex).xyz;
	vec3 Emissive = imageLoad(PixelEmissive, RayIndex).xyz;
	float Specular = imageLoad(PixelSS, RayIndex).r;
	float Shininess = imageLoad(PixelSS, RayIndex).g;
	float AmbientOcclusion = imageLoad(PixelORM, RayIndex).r;
	float Roughness = imageLoad(PixelORM, RayIndex).g;
	float Metallic = imageLoad(PixelORM, RayIndex).b;

	// Start FinalColor, and ViewDir. TODO: Ignore Emissive
	vec3 FinalColor = Albedo.rgb*AmbientOcclusion;

	// View direction of the camera.
	vec3 ViewDir = normalize(Camera3D.Position - WorldPos);

	// Ray origin will start at the world position of the fragment.
	Ray.Origin = WorldPos;

	// Iterate through each light source adding contributions per light source based on intersection with object in TLAS.
	for (int i = 0; i < Light.length(); i++) {
		// Ray direction will be determined from the pixel position to the light source. (Same as light dir)
		Ray.Direction = normalize(Light[i].Position - Ray.Origin);
		// Set the ray hit to 0.
		Ray.Hit = 0;        

		// Trace ray into scene to see if there is an intersection towards the direction of the light source.
		traceRayEXT(
			TLAS,
			gl_RayFlagsOpaqueEXT,
			0xFF,
			0, 0, 0,
			Ray.Origin,
			0.001,                                      // Small offset to avoid self-intersection
			Ray.Direction,
			length(Light[i].Position - Ray.Origin),    // Only check up to light distance
			0                                           // Location of the ray payload
		);

		// If light is obstructed, skip the light source.
		if (Ray.Hit == 1) continue;

		// Calculate the light intensity based on the light source type.
		float r = length(Light[i].Position - WorldPos);
		// Calculates the diffuse term.
		vec3 d = Albedo.rgb * max(dot(Normal, Ray.Direction), 0.0);
		// Calculates the specular term.
		vec3 s = rs(Ray.Direction, Normal, ViewDir, Roughness, Metallic)*vec3(1.0);
		// Calculate the final color based on the light source intensity.
		FinalColor += ((1.0 - Specular)*d + Specular*s)*Light[i].Color*Light[i].Intensity / (r*r);
	}

	// Apply simple tone mapping
	FinalColor = FinalColor / (FinalColor + vec3(1.0));

	// Write the final color per pixel to the output color image.
	imageStore(OutputColor, RayIndex, vec4(FinalColor, 1.0f));
}